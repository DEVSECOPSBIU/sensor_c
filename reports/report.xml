<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="x86_C_CERT_C_project-build_id_1" climode="true" endTime="2025-03-30T20:00:23+00:00" execEnv="linux_x86_64" hasViols="true" id="1744442694857" lang="en_US" machine="deb6303c8c8e" project="x86_C_CERT_C_project" tag="${scontrol_branch}-linux_x86_64" time="2025-03-30T20:00:18+00:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.2.0" user="root">
   <TestConfig machine="deb6303c8c8e" name="SEI CERT C Rules" pseudoUrl="builtin://SEI CERT C Rules" user="root"/>
   <Authors>
      <Author id="dev1" name="root"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.1.20241108"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.1.20241114B2528"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.1.20241023B5124"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.1.20241114B2528"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="25">
      
      <History>
         <Graph id="gls">
            <Categories>
               <Category color="red" name="Total" pos="0"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Tasks" yTitle2="Total Tasks">
               <X>03-30-25,</X>
               <Y>25,</Y>
               <Delta>25,</Delta>
            </Total>
         </Graph>
      </History>
   
   </Goals>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc auth="root" hash="-1854974830" locRef="1" totLns="163" uri="file:/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:04">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="1" checkedLns="163" name="unknown" qfixErrs="0" suppErrs="0" totErrs="25" totFiles="1" totLns="163"/>
      </Projects>
      
      <History>
         <Graph id="lns">
            <Categories>
               <Category color="blue" name="Total Lines" pos="0"/>
               <Category color="green" name="Checked Lines" pos="1"/>
               <Category authPos="0" color="red" name="Tasks" pos="2"/>
            </Categories>
            <Total secSer="1" title="" xTitle="Date" yTitle="Lines" yTitle2="Tasks">
               <X>03-30-25,</X>
               <Y>163,163,25,</Y>
               <Delta>163,163,25,</Delta>
            </Total>
            <Authors title="" xTitle="Date" yTitle="Total Tasks">
               <Author name="root">
                  <X>03-30-25,</X>
                  <Y>25,</Y>
                  <Delta>25,</Delta>
               </Author>
            </Authors>
         </Graph>
      </History>
   
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="374" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0"/>
               <Category authTot="1;" authUrg="1;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="6" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="16" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0"/>
               <Category authTot="3;" authUrg="3;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0"/>
               <Category authTot="6;" authUrg="6;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="1" total="6"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0"/>
               <Category authTot="2;" authUrg="2;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="3" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0"/>
               <Category authTot="5;" authUrg="5;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="3" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0"/>
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Do not acquire locks in different order" id="CERT_C-CON35-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Identifiers that begin with an underscore and either an uppercase letter or another underscore should not be declared" id="CERT_C-DCL37-b" origId="NAMING-33_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Avoid declaring file-scoped objects whose names begin with an underscore" id="CERT_C-DCL37-c" origId="NAMING-33_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="CERT_C-DCL37" desc="The names of standard library macros should not be reused (C11 code)" id="CERT_C-DCL37-d" origId="CODSTA-92_c" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="The names of standard library identifiers with file scope should not be reused (C11 code)" id="CERT_C-DCL37-e" origId="CODSTA-92_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="The standard library identifiers with external linkage should not be reused (C11 code)" id="CERT_C-DCL37-f" origId="CODSTA-92_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Macros that begin with an underscore and either an uppercase letter or another underscore should not be defined" id="CERT_C-DCL37-g" origId="NAMING-33_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly define signal handlers" id="CERT_C-ERR32-b" origId="BD-PB-SIGHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="CERT_C-ERR33" desc="The value returned by a standard library function that may return an error should be used" id="CERT_C-ERR33-a" origId="CODSTA-226_a" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR33-e" origId="MRM-39" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR34" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not modify objects with temporary lifetime" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="Do not cast pointers into more strictly aligned pointer types" id="CERT_C-EXP36-a" origId="CODSTA-230" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CERT_C-EXP37-a" origId="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CERT_C-EXP37-b" origId="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="5;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators" id="CERT_C-FIO41-a" origId="CODSTA-228_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls" id="CERT_C-FIO41-b" origId="CODSTA-228_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid wraparounds when performing arithmetic integer operations" id="CERT_C-INT30-a" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="3;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid data loss when converting between integer types" id="CERT_C-INT31-o" origId="BD-PB-INTDL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid value change when converting between integer types" id="CERT_C-INT31-p" origId="BD-PB-INTVC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid signed integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC33" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads" id="CERT_C-POS44-a" origId="SECURITY-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="6;" cat="CERT_C-POS54" desc="The value returned by a POSIX library function that may return an error should be used" id="CERT_C-POS54-a" origId="CODSTA-227" sev="1" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="3;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="15;" authUrg="15;" id="1" total="15"/>
            <Severity authTot="4;" authUrg="4;" id="2" total="4"/>
            <Severity authTot="6;" authUrg="6;" id="3" total="6"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="Do not declare the 'ERROR_MSG' identifier since this name is a reserved macro name" ln="40" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="40" sev="3" auth="root" locRef="1" rule="CERT_C-DCL37-d" lnHash="-1997556606" rule.header="The names of standard library macros should not be reused (C11 code)" tool="c++test" lineHash="-1997556606" unbViolId="6d54e4de-7298-3b59-9b3c-75505440e0d8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7663433-ebe9-32be-9af2-2ea81f5a1883" locEndPos="18" locType="sr" urgent="true" hash="-1854974830" locEndLn="40" goals="1,"/>
    <StdViol msg="Operands of the '*' operator have different essential types: 'unsigned long' and 'signed char'" ln="44" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="44" sev="2" auth="root" locRef="1" rule="CERT_C-INT31-j" lnHash="1021777272" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="1021777272" unbViolId="78915bc4-d6d3-399c-baf7-a86550fb0d39" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfa699a6-b95f-3113-a84d-33171cb4d364" locEndPos="36" locType="sr" urgent="true" hash="-1854974830" locEndLn="44" goals="1,"/>
    <StdViol msg="The value returned by the POSIX library function 'strcpy' should be used" ln="59" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="59" sev="1" auth="root" locRef="1" rule="CERT_C-POS54-a" lnHash="-1384907465" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1384907465" unbViolId="86402a36-f2bb-33ec-be46-d42aac49b93b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="123c8fb3-5db9-3f30-be08-b1d9a0edc9e6" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="59" goals="1,"/>
    <StdViol msg="Avoid using unsafe string function 'strcpy' in your program" ln="59" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="59" sev="1" auth="root" locRef="1" rule="CERT_C-STR31-e" lnHash="-1384907465" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="-1384907465" unbViolId="c976caf0-44b5-3de9-b160-1ad96094e904" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0c141f2-1a31-30a2-bd96-986b9c1e0136" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="59" goals="1,"/>
    <StdViol msg="The string literal is embedded directly in the code: Low" ln="59" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="59" sev="1" auth="root" locRef="1" rule="CERT_C-MSC41-a" lnHash="-1384907465" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1384907465" unbViolId="5ad3af88-8c15-3bde-ac1c-57885ecbf78e" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="175b2c59-1a5c-30ea-bfd5-d42b589c9b79" locEndPos="41" locType="sr" urgent="true" hash="-1854974830" locEndLn="59" goals="1,"/>
    <StdViol msg="The value returned by the POSIX library function 'strcpy' should be used" ln="60" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="60" sev="1" auth="root" locRef="1" rule="CERT_C-POS54-a" lnHash="660982285" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="660982285" unbViolId="8b839446-fae5-307e-9b5b-c1e3cd03e02b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94c192e0-b999-3558-988f-e1d38369697d" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="60" goals="1,"/>
    <StdViol msg="Avoid using unsafe string function 'strcpy' in your program" ln="60" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="60" sev="1" auth="root" locRef="1" rule="CERT_C-STR31-e" lnHash="660982285" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="660982285" unbViolId="82d5ef3b-2de4-3486-b2e4-eeb36295e9c1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3cd5cae-c580-32fe-9135-c5fc7d945829" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="60" goals="1,"/>
    <StdViol msg="The string literal is embedded directly in the code: High" ln="60" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="60" sev="1" auth="root" locRef="1" rule="CERT_C-MSC41-a" lnHash="660982285" rule.header="Do not hard code string literals" tool="c++test" lineHash="660982285" unbViolId="2c3e8e78-83d7-35c1-8acf-8ce51619fd41" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="807aeb55-c153-3f3e-b5ec-e9b2c3f91319" locEndPos="42" locType="sr" urgent="true" hash="-1854974830" locEndLn="60" goals="1,"/>
    <StdViol msg="The value returned by the POSIX library function 'strcpy' should be used" ln="61" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="61" sev="1" auth="root" locRef="1" rule="CERT_C-POS54-a" lnHash="-410884226" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-410884226" unbViolId="7c455efa-3258-39c8-a7f4-0ae487df813b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5764f180-238f-34d2-8767-3daef3dd9aa7" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="61" goals="1,"/>
    <StdViol msg="Avoid using unsafe string function 'strcpy' in your program" ln="61" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="61" sev="1" auth="root" locRef="1" rule="CERT_C-STR31-e" lnHash="-410884226" rule.header="Avoid using unsafe string functions which may cause buffer overflows" tool="c++test" lineHash="-410884226" unbViolId="a5fa55ff-ad48-3829-a100-aecda912a906" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d06c940-c5b7-37bc-9b9f-bfa63696d777" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="61" goals="1,"/>
    <StdViol msg="The string literal is embedded directly in the code: Error occurred" ln="61" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="61" sev="1" auth="root" locRef="1" rule="CERT_C-MSC41-a" lnHash="-410884226" rule.header="Do not hard code string literals" tool="c++test" lineHash="-410884226" unbViolId="8113f59f-e61b-3f85-b98f-12fc7a574b17" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3f7c9ae-381d-309c-aaca-162d2c8e11a5" locEndPos="37" locType="sr" urgent="true" hash="-1854974830" locEndLn="61" goals="1,"/>
    <FlowViol msg="Value returned from method &quot;fflush&quot; should be checked" ln="81" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="82" rule="CERT_C-ERR33-d" FirstElSrcRngStartPos="0" lnHash="485967943" ruleSCSCMsg="Method call" FirstElSrcRngFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="81" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="689797324" lang="cpp" violId="c5459aec-9bee-328d-a04d-d1fe82090437" locEndPos="0" urgent="true" locEndLn="82" goals="1," locStartln="81" sev="1" locRef="1" tool="c++test" lineHash="485967943" unbViolId="0ad93c15-9d3f-3475-9f25-4eaaf1de4b19" locType="sr" hash="-1854974830" causeLocRef="1">
      <ElDescList>
        <ElDesc lineHash="1965949953" ln="76" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1854974830" srcRngStartln="76" srcRngEndLn="77" srcRngFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" desc="if (msgIndex &lt; 0 || msgIndex > 2) {" ElType="." rngLn="76">
          <Anns>
            <Ann msg="Condition evaluation: (msgIndex &lt; 0) (assuming true)" kind="condEval"/>
            <Ann msg="Condition evaluation: msgIndex &lt; 0 || msgIndex > 2 (true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-720548177" ln="77" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1854974830" srcRngStartln="77" srcRngEndLn="78" srcRngFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" desc="printf(&quot;Value: %d, State: Undefined\n&quot;, value);" ElType="." rngLn="77"/>
        <ElDesc lineHash="485967943" ln="81" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-1854974830" srcRngStartln="81" srcRngEndLn="82" srcRngFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" desc="fflush(stdout);" ElType="CP" rngLn="81">
          <Anns>
            <Ann msg="Method call" kind="cause"/>
            <Ann msg="Point by which returned value should be checked" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The value returned by the standard library function 'fflush' should be used" ln="81" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="81" sev="1" auth="root" locRef="1" rule="CERT_C-ERR33-a" lnHash="485967943" rule.header="The value returned by a standard library function that may return an error should be used" tool="c++test" lineHash="485967943" unbViolId="5b32db76-babb-3533-94ae-67e4fb8b77d4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b85edb4-f727-3753-9e78-b4673d396307" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="81" goals="1,"/>
    <StdViol msg="The value returned by the POSIX library function 'fflush' should be used" ln="81" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="81" sev="1" auth="root" locRef="1" rule="CERT_C-POS54-a" lnHash="485967943" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="485967943" unbViolId="5e7187d9-9b75-3a2c-bba0-201944f9c1af" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ea137db-3e67-316c-bbce-1b8e723a749f" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="81" goals="1,"/>
    <StdViol msg="Prototype of function 'finalize' does not precede function call" ln="85" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="85" sev="3" auth="root" locRef="1" rule="CERT_C-EXP37-d" lnHash="-538453380" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-538453380" unbViolId="b1b92dd8-d600-3caf-b0e3-46e075ea0db3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c52006d-ee64-33cb-98f7-9172022c32ad" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="85" goals="1,"/>
    <StdViol msg="Prototype of function 'initialize' does not precede function call" ln="86" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="86" sev="3" auth="root" locRef="1" rule="CERT_C-EXP37-d" lnHash="-614703670" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-614703670" unbViolId="4e9ab6ed-d671-35cf-af4a-5a3aee9c1c3a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2a8ce8e-9852-3a2e-99b7-669a31f7f0c9" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="86" goals="1,"/>
    <StdViol msg="Prototype of function 'initialize' does not precede function call" ln="92" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="92" sev="3" auth="root" locRef="1" rule="CERT_C-EXP37-d" lnHash="-614703670" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-614703670" unbViolId="58c59229-1e55-315e-8590-7ede00df931e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3950a49-19e6-36b6-8eb5-2ac54b9e9aea" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="92" goals="1,"/>
    <StdViol msg="The value returned by the POSIX library function 'clock_gettime' should be used" ln="103" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="103" sev="1" auth="root" locRef="1" rule="CERT_C-POS54-a" lnHash="-446458843" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-446458843" unbViolId="e361f194-27ed-32ce-ba82-e0b10cb555b9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5016e3c8-885c-3cad-bbae-4b25d1661798" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="103" goals="1,"/>
    <StdViol msg="Prototype of function 'reportSensorFailure' does not precede function call" ln="113" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="113" sev="3" auth="root" locRef="1" rule="CERT_C-EXP37-d" lnHash="-1484743106" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="-1484743106" unbViolId="22bf311f-b9e4-31c9-a2a1-6ce25e88a201" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="847086ca-9a35-39c0-8342-890b8a4898df" locEndPos="13" locType="sr" urgent="true" hash="-1854974830" locEndLn="113" goals="1,"/>
    <StdViol msg="The value returned by the POSIX library function 'clock_gettime' should be used" ln="120" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="120" sev="1" auth="root" locRef="1" rule="CERT_C-POS54-a" lnHash="1443409566" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="1443409566" unbViolId="cc7eaf52-9c54-370a-a6dd-863bd3295486" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d22a60c-da27-30eb-bd86-1b8b17df71f0" locEndPos="5" locType="sr" urgent="true" hash="-1854974830" locEndLn="120" goals="1,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="144" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="144" sev="1" auth="root" locRef="1" rule="CERT_C-MSC41-a" lnHash="301317988" rule.header="Do not hard code string literals" tool="c++test" lineHash="301317988" unbViolId="354649b4-3c93-375d-9630-03fc5e1b4ae3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="763df8d1-7bd1-3b51-939e-321a415ad45e" locEndPos="22" locType="sr" urgent="true" hash="-1854974830" locEndLn="144" goals="1,"/>
    <StdViol msg="Operands of the '!=' operator have different essential types: 'int' and 'char'" ln="146" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="146" sev="2" auth="root" locRef="1" rule="CERT_C-INT31-j" lnHash="-1487828575" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-1487828575" unbViolId="2806c985-3a25-3176-8f57-cb5d59db8363" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdb85361-faaf-30b0-8a79-e5766f6cd19a" locEndPos="20" locType="sr" urgent="true" hash="-1854974830" locEndLn="146" goals="1,"/>
    <StdViol msg="Prototype of function 'finalize' does not precede function call" ln="150" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="150" sev="3" auth="root" locRef="1" rule="CERT_C-EXP37-d" lnHash="1860686460" rule.header="Functions shall always have visible prototype at the function call" tool="c++test" lineHash="1860686460" unbViolId="0b042b20-7b33-3e2a-a733-d1b6cf76fa0e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ed4b39b-824b-33e7-b6f0-d2ef49b55a6a" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="150" goals="1,"/>
    <StdViol msg="Operands of the '!=' operator have different essential types: 'int' and 'char'" ln="156" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="156" sev="2" auth="root" locRef="1" rule="CERT_C-INT31-j" lnHash="-54620196" rule.header="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" tool="c++test" lineHash="-54620196" unbViolId="90be0b3a-c84f-3541-a482-2def840dc2f6" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a14d1af-71c4-30c8-9017-f86d80f90b24" locEndPos="16" locType="sr" urgent="true" hash="-1854974830" locEndLn="156" goals="1,"/>
    <StdViol msg="The expression of the 'essentially signed' type is assigned to an object with the 'essentially character' type" ln="157" locFile="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locStartln="157" sev="2" auth="root" locRef="1" rule="CERT_C-INT31-i" lnHash="297137168" rule.header="The value of an expression shall not be assigned to an object of a different essential type category" tool="c++test" lineHash="297137168" unbViolId="6bc1c3c3-48eb-3191-b286-c69227dce507" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8cf05d9-f5d5-39d4-b19c-5b8beb8f0485" locEndPos="9" locType="sr" urgent="true" hash="-1854974830" locEndLn="157" goals="1,"/>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="25">
            <Project id="unknown" name="unknown" supp="0" total="25">
               <Res loc="/home/parasoft/workspace_BIU_TEST/sensor_c/sensor_c.c" locRef="1" locType="sr" name="sensor_c.c" supp="0" total="25"/>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>